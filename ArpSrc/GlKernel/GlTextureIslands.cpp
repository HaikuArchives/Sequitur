#include <math.h>
#include <ArpCore/StlSet.h>
#include <ArpCore/StlVector.h>
#include "GlPublic/GlImage.h"
#include "GlPublic/GlPixel.h"
#include "GlPublic/GlPlanes.h"
#include "GlPublic/GlTextureIslands.h"

/*******************************************************
 * _GL-ISLAND-DATA
 *******************************************************/
class _GlIsland
{
public:
	const uint8*	island;
	int32			w, h;

	_GlIsland() : island(0), w(0), h(0)		{ }
	_GlIsland(const uint8* inI, int32 inW, int32 inH)
			: island(inI), w(inW), h(inH)	{ }
};

class _GlIslandData
{
public:
	vector<_GlIsland*>	islands;

	_GlIslandData()							{ }
	~_GlIslandData()
	{
		for (uint32 k = 0; k < islands.size(); k++) delete islands[k];
		islands.resize(0);
	}
};

/*******************************************************
 * _GL-IMAGE-TO-ISLANDS
 *******************************************************/
static const int32		GROUP_START	= 0;
static const int32		NO_GROUP	= -1;
static const int32		TEMP_GROUP	= -2;

struct _island
{
	int32		group;

	_island() :group(NO_GROUP)		{ }
};

class _GlImageToIslands
{
public:
	_GlImageToIslands();
	
	status_t		MakeIslands(GlPlanes* pixels, int32 w, int32 h,
								int32 iR, int32 cR, int32 sR,
								int32 minW, int32 minH,
								GlTextureIslands* target);

private:
	GlTextureIslands*	mTarget;
	int32				mMinW, mMinH;
	
	status_t			MakeGrowthPattern(	GlPlanes* pixels, int32 w, int32 h,
											int32 initalRange,
											int32 connectedRange, int32 separatedRange,
											int32 minW, int32 minH);

	/* ALGORITHM
	 */
	/* Smooth out the islands -- fill in any holes.
	 */
	void				Step5(	_island* islands, int32 w, int32 h);
	/* Write out the islands.
	 */
	status_t			Step6(	GlPlanes* pixels, _island* islands, int32 w, int32 h,
								set<int32>& groups, int32 minW, int32 minH);
	
	/* UTILS
	 */
	bool	merge_groups(		_island* islands, int32 w, int32 h);
	bool	grow_group(			GlPlanes* pixels, _island* islands, int32 w,
								int32 h, int32 group, int32 altitude);
	int32	surrounding_group(	_island* islands, int32 w, int32 h, int32 x, int32 y);

};

/*******************************************************
 * GL-TEXTURE-ISLANDS
 *******************************************************/
GlTextureIslands::GlTextureIslands()
		: mStatus(B_ERROR), mData(0)
{
	mData = new _GlIslandData();
	if (mData) mStatus = B_OK;
}

GlTextureIslands::GlTextureIslands(	GlImage* image, int32 iR, int32 cR,
						int32 sR, int32 dW, int32 dH)
		: mStatus(B_ERROR), mData(new _GlIslandData())
{
	if (mData && image) {
		GlPlanes*				pixels = image->LockPixels(GL_PIXEL_RGBA);
		if (pixels) {
			_GlImageToIslands	itoi;
			mStatus = itoi.MakeIslands(pixels, pixels->w, pixels->h, iR, cR, sR, dW, dH, this); 
			image->UnlockPixels(pixels);
		}
	}
}

GlTextureIslands::~GlTextureIslands()
{
	delete mData;
	mData = 0;
}

status_t GlTextureIslands::InitCheck() const
{
	return mStatus;
}

uint32 GlTextureIslands::Size() const
{
	ArpVALIDATE(mStatus == B_OK && mData, return 0);
	return uint32(mData->islands.size());
}

void GlTextureIslands::GetIslandLimits(	int32* minX, int32* minY,
										int32* maxX, int32* maxY) const
{
	if (minX) *minX = 0;
	if (minY) *minY = 0;
	if (maxX) *maxX = 0;
	if (maxY) *maxY = 0;
	if (!mData) return;
	for (uint32 k = 0; k < mData->islands.size(); k++) {
		if (mData->islands[k]) {
			if (minX && (*minX == 0 || mData->islands[k]->w < *minX))
				*minX = mData->islands[k]->w;
			if (minY && (*minY == 0 || mData->islands[k]->h < *minY))
				*minY = mData->islands[k]->h;
			if (maxX && (*maxX == 0 || mData->islands[k]->w > *maxX))
				*maxX = mData->islands[k]->w;
			if (maxY && (*maxY == 0 || mData->islands[k]->h > *maxY))
				*maxY = mData->islands[k]->h;
		}
	}
}

const uint8* GlTextureIslands::GetIsland(uint32 index, int32* w, int32* h) const
{
	ArpVALIDATE(mStatus == B_OK && mData, return 0);
	if (index >= mData->islands.size()) return 0;
	*w = mData->islands[index]->w;
	*h = mData->islands[index]->h;
	return mData->islands[index]->island;
}

status_t GlTextureIslands::AddIsland(const uint8* island, int32 w, int32 h)
{
	ArpVALIDATE(mStatus == B_OK && mData, return B_ERROR);
	_GlIsland*		i = new _GlIsland(island, w, h);
	if (!i) return B_NO_MEMORY;
	mData->islands.push_back(i);
	return B_OK;
}

// #pragma mark -

/*******************************************************
 * Fern moss texture
 *******************************************************/
const uint8 gFernMoss0Data[] = { 0, 0, 0, 184, 170, 191, 222, 203, 215, 208, 184, 184, 0, 0, 0, 0, 0, 0, 183, 202, 198, 200, 208, 204, 208, 200, 216, 0, 0, 0, 0, 0, 185, 190, 229, 221, 178, 207, 200, 194, 209, 206, 189, 184, 172, 0, 189, 189, 197, 212, 195, 178, 221, 207, 212, 205, 194, 0, 0, 180, 170, 179, 203, 205, 0, 0, 188, 219, 229, 222, 229, 177, 0, 178, 0, 176, 180, 0, 0, 0, 0, 212, 187, 211, 225, 202, 171, 174, 196, 223, 0, 0, 0, 0, 0, 190, 208, 154, 202, 219, 171, 176, 207, 213, 183, 0, 0, 0, 0, 0, 190, 174, 168, 207, 219, 191, 201, 238, 227, 157, 178, 178, 171, 0, 0, 0, 181, 204, 194, 177, 187, 207, 214, 196, 183, 174, 180, 178, 187, 0, 0, 183, 188, 171, 0, 177, 188, 204, 183, 174, 220, 208, 197, 192, 192, 171, 0, 205, 210, 204, 200, 191, 184, 191, 177 };
const uint8 gFernMoss1Data[] = { 229, 177, 0, 178, 0, 0, 0, 202, 171, 174, 196, 223, 176, 0, 171, 176, 207, 213, 183, 183, 0, 191, 201, 238, 227, 157, 197, 175, 187, 207, 214, 196, 183, 141, 0, 177, 188, 204, 183, 174, 181, 0, 200, 191, 184, 191, 177, 0, 0, 217, 194, 188, 181, 0, 0, 177 };
const uint8 gFernMoss2Data[] = { 167, 178, 178, 171, 0, 0, 0, 181, 169, 174, 180, 178, 187, 0, 0, 183, 215, 220, 208, 197, 192, 192, 171, 0, 225, 230, 227, 201, 190, 180, 0, 0, 188, 204, 211, 202, 210, 204, 195, 184, 178, 198, 210, 207, 205, 204, 204, 195, 179, 0, 0, 0, 200, 197, 188, 173, 173, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 198, 177, 0, 171, 0, 0, 0, 0, 0, 190, 0, 176, 0 };
const uint8 gFernMoss3Data[] = { 205, 210, 204, 200, 191, 227, 234, 230, 217, 194, 205, 212, 224, 208, 175, 177, 197, 205, 194, 178, 191, 205, 0, 0, 185 };
const uint8 gFernMoss4Data[] = { 188, 181, 0, 0, 177, 169, 0, 0, 0, 177, 0, 180, 190, 193, 172, 177, 0, 0, 178, 178, 178, 191, 220, 200, 191, 189, 204, 178, 160, 0, 190, 211, 234, 218, 211, 195, 188, 185, 174, 0, 188, 202, 222, 210, 212, 185, 165, 178, 0, 0, 190, 195, 212, 195, 185, 192, 198, 0, 0, 0, 0, 200, 205, 208, 190, 180, 181, 0, 0, 0, 0, 0, 202, 224, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0 };
const uint8 gFernMoss5Data[] = { 0, 0, 0, 198, 177, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 0, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 183, 0, 0, 195, 190, 188, 0, 0, 0, 0, 0, 0, 197, 180, 190, 207, 202, 175, 161, 173, 0, 0, 0, 0, 0, 197, 183, 193, 211, 204, 187, 170, 0, 0, 0, 0, 0, 0, 200, 188, 197, 209, 205, 207, 0, 0, 158, 183, 0, 0, 184, 195, 211, 204, 225, 204, 197, 0, 0, 134, 186, 209, 181, 167, 191, 231, 232, 246, 191, 174, 185, 0, 175, 186, 185, 193, 211, 210, 194, 188, 208, 185, 170, 178, 0, 210, 200, 188, 184, 197, 200, 185, 173, 190, 175, 168, 178, 0, 210, 178, 173, 180, 191, 190, 183, 0, 0, 185, 0, 0, 176, 0, 0, 178, 185, 190, 185, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 173, 0, 0, 0, 0, 0, 0 };

GlTextureIslands* gl_new_fern_moss_texture()
{
	GlTextureIslands*	texture = new GlTextureIslands();
	if (!texture || texture->InitCheck() != B_OK) {
		delete texture;
		return 0;
	}
	texture->AddIsland(gFernMoss0Data, 15, 11);
	texture->AddIsland(gFernMoss1Data, 7, 8);
	texture->AddIsland(gFernMoss2Data, 8, 10);
	texture->AddIsland(gFernMoss3Data, 5, 5);
	texture->AddIsland(gFernMoss4Data, 10, 9);
	texture->AddIsland(gFernMoss5Data, 13, 13);
	return texture;
}

/*******************************************************
 * Hair cap moss texture
 *******************************************************/
const uint8 gHairCap0Data[] = { 129, 115, 103, 97, 100, 107, 118, 130, 141, 144, 148, 149, 167, 188, 207, 213, 191, 163, 135, 122, 100, 0, 117, 113, 113, 110, 113, 122, 135, 0, 0, 0, 0, 153, 172, 179, 190, 200, 199, 172, 134, 107, 105, 0, 115, 118, 123, 127, 125, 135, 151, 0, 0, 0, 0, 155, 176, 174, 177, 191, 202, 183, 139, 102, 115, 0, 0, 0, 0, 118, 127, 134, 139, 0, 0, 0, 155, 155, 170, 160, 151, 158, 168, 172, 155, 137, 110, 0, 0, 0, 0, 0, 123, 129, 134, 142, 148, 149, 148, 148, 155, 146, 141, 146, 155, 155, 142, 127, 110, 0, 0, 0, 0, 0, 129, 134, 142, 146, 0, 0, 0, 149, 139, 132, 127, 132, 139, 139, 127, 115, 113, 0, 0, 0, 0, 0, 137, 142, 146, 155, 0, 0, 0, 153, 129, 127, 127, 129, 132, 127, 120, 115, 115, 0, 0, 0, 0, 0, 125, 127, 134, 137, 137, 137, 134, 130, 127, 0, 0, 0, 132, 125, 123, 120, 120, 117, 135, 0, 0, 0, 0, 0, 107, 108, 110, 107, 0, 0, 127, 0, 0, 0, 132, 123, 122, 0, 0, 115, 123, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 123, 117, 120, 0, 0, 110, 0, 0, 0, 120, 108, 110, 113, 115, 113, 110, 105, 102, 113, 127, 0, 0, 118, 110, 113, 0, 0, 110 };
const uint8 gHairCap1Data[] = { 0, 0, 0, 0, 0, 134, 151, 142, 137, 132, 132, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 149, 146, 137, 132, 135, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 151, 146, 139, 135, 137, 0, 0, 0, 127, 107, 0, 0, 0, 0, 153, 165, 0, 0, 0, 137, 141, 149, 156, 153, 139, 130, 141, 148, 120, 132, 0, 0, 0, 0, 160, 170, 172, 168, 160, 149, 144, 149, 155, 161, 160, 161, 167, 168, 160, 0, 0, 0, 0, 118, 156, 174, 158, 144, 155, 176, 174, 168, 167, 176, 183, 181, 174, 163, 165, 0, 0, 0, 0, 120, 130, 170, 177, 167, 176, 204, 207, 195, 184, 183, 183, 174, 149, 130, 129, 130, 130, 129, 129, 0, 97, 161, 209, 215, 206, 216, 191, 188, 183, 181, 174, 158, 134, 118, 107, 103, 103, 110, 120, 0, 72, 146, 220, 227, 202, 197, 139, 155, 174, 176, 160, 144, 137, 137, 137, 129, 115, 115, 122, 130, 65, 127, 190, 186, 161, 156, 110, 146, 0, 0, 148, 123, 130, 0, 0, 161, 144, 139, 146, 0, 70, 115, 156, 139, 118, 125, 115, 0, 0, 0, 137, 103, 110, 135, 199, 183, 161, 160, 0, 0, 0, 0, 100, 130, 132, 122, 117, 0, 0, 0, 132, 120, 122, 122, 144, 163, 0, 0, 0, 0, 0, 0, 105, 122, 132, 0, 0, 0, 0, 0, 144, 144, 149, 146, 153, 165, 0, 0, 0, 0, 0, 0, 110, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 161, 163, 165, 167, 167, 168, 0, 110, 103, 108, 0, 0, 125, 134, 137, 135, 0, 0, 0, 132, 155, 158, 158, 163, 167, 168, 0, 0, 0, 105, 118, 122, 108, 120, 129, 142, 0, 0, 0, 123, 144, 149, 161, 168, 174, 172 };
const uint8 gHairCap2Data[] = { 0, 142, 142, 146, 148, 149, 139, 134, 0, 0, 0, 0, 0, 0, 0, 0, 127, 135, 146, 146, 142, 144, 156, 170, 142, 0, 0, 144, 117, 127, 132, 117, 0, 127, 123, 135, 156, 168, 161, 151, 153, 181, 181, 151, 139, 153, 153, 135, 0, 115, 105, 127, 172, 191, 172, 142, 176, 181, 176, 161, 167, 0, 0, 0, 120, 108, 108, 134, 168, 191, 184, 167, 202, 191, 176, 172, 0, 0, 0, 0, 117, 123, 132, 144, 158, 174, 190, 200, 224, 197, 177, 0, 0, 0, 0, 0, 156, 161, 161, 153, 146, 153, 179, 204, 213, 188, 174, 0, 0, 153, 141, 0, 245, 218, 177, 149, 142, 146, 160, 167, 179, 161, 160, 174, 160, 129, 127, 0, 255, 255, 183, 144, 144, 149, 141, 127, 151, 139, 151, 167, 146, 113, 123, 0, 255, 206, 137, 135, 142, 129, 115, 122, 132, 115, 102, 100, 117, 134, 0, 0, 240, 172, 123, 122, 120, 105, 98, 110, 130, 120, 108, 110, 123, 0, 0, 0, 176, 146, 127, 118, 110, 0, 98, 115, 127, 118, 115, 120, 0, 0, 0, 0, 135, 141, 142, 132, 113, 0, 113, 134, 120, 115, 115, 0, 0, 0, 0, 0 };
const uint8 gHairCap3Data[] = { 0, 0, 115, 110, 0, 0, 0, 115, 105, 127, 172, 191, 0, 115, 0, 0, 108, 115, 120, 108, 108, 134, 168, 191, 117, 105, 0, 0, 0, 107, 117, 123, 132, 144, 158, 174, 120, 108, 0, 0, 0, 108, 156, 161, 161, 153, 146, 153, 132, 122, 108, 105, 113, 122, 245, 218, 177, 149, 142, 146, 148, 135, 125, 120, 125, 135, 255, 255, 183, 144, 144, 149, 144, 172, 144, 103, 168, 255, 255, 206, 137, 135, 142, 129, 142, 149, 134, 129, 199, 255, 240, 172, 123, 122, 120, 105, 149, 130, 129, 165, 227, 255, 176, 146, 127, 118, 110, 0, 165, 135, 144, 199, 231, 222, 135, 141, 142, 132, 113, 0, 0, 156, 172, 218, 213, 161, 118, 141, 153, 135, 110, 108, 0, 176, 197, 220, 191, 132, 123, 151, 155, 127, 108, 115, 156, 174, 200, 213, 183, 146, 163, 181, 170, 132, 118, 139, 135, 161, 199, 204, 186, 174, 204, 216, 193, 148, 141, 165, 155, 156, 163, 172, 184, 188, 234, 179, 156, 168, 146, 115, 174, 167, 165, 170, 186, 202, 254, 200, 177, 190, 176, 153, 0, 0, 160, 163, 188, 213, 233, 183, 158, 165, 161, 155, 0, 0, 149, 153, 183, 211, 216, 174, 144, 144, 144, 151, 163, 149, 134, 142, 170, 200, 243, 207, 176, 167, 172, 183, 132, 122, 129, 148, 168, 186, 227, 204, 179, 170, 179, 191, 0, 0, 132, 163, 176, 177, 167, 155, 141, 141, 158, 176, 0, 0, 137, 179, 0, 176, 134, 130, 127, 132, 158, 183 };
const uint8 gHairCap4Data[] = { 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 120, 117, 120, 120, 0, 0, 0, 115, 113, 117, 117, 105, 0, 0, 0, 115, 110, 113, 120, 123, 117, 108, 117, 118, 120, 108, 0, 0, 0, 110, 102, 105, 115, 122, 115, 105, 130, 134, 132, 122, 108, 105, 0, 110, 97, 100, 115, 123, 115, 105, 142, 151, 148, 135, 125, 120, 118, 118, 120, 125, 135, 153, 168, 177, 222, 160, 144, 172, 144, 103, 0, 0, 0, 0, 0, 0, 177, 176, 200, 158, 142, 149, 134, 129, 108, 0, 0, 0, 0, 0, 174, 160, 167, 161, 149, 130, 129, 165, 98, 115, 0, 0, 0, 167, 153, 144, 135, 167, 165, 135, 144, 199, 110, 117, 125, 134, 142, 146, 149, 149, 125, 0, 0, 156, 172, 218, 0, 132, 127, 127, 134, 146, 0, 0, 139, 0, 0, 176, 197, 220, 0, 139, 134, 134, 139, 151, 0, 0, 0, 0, 156, 174, 200, 213, 0, 127, 130, 135, 139, 144, 151, 155, 188, 151, 135, 161, 199, 204 };
const uint8 gHairCap5Data[] = { 0, 0, 0, 0, 120, 0, 0, 0, 123, 117, 120, 0, 113, 110, 105, 102, 113, 127, 0, 0, 118, 110, 113, 0, 127, 115, 137, 170, 167, 120, 0, 0, 0, 0, 0, 0, 122, 117, 158, 215, 172, 122, 0, 0, 0, 0, 0, 0, 118, 115, 181, 255, 197, 137, 0, 0, 0, 0, 0, 0, 120, 112, 179, 255, 225, 161, 108, 0, 0, 0, 0, 0, 118, 107, 161, 242, 227, 165, 107, 0, 0, 0, 0, 0, 110, 0, 144, 209, 215, 155, 103, 0, 0, 0, 0, 107, 0, 0, 139, 200, 218, 161, 118, 115, 118, 108, 107, 0, 0, 0, 142, 204, 238, 184, 148, 148, 149, 0, 0, 0, 0, 129, 202, 222, 220, 184, 142, 118, 117, 0, 0, 0, 113, 153, 177, 177, 195, 165, 132, 115, 115, 0, 0, 0, 0, 163, 137, 127, 161, 142, 120, 110, 113, 0, 0, 0, 0, 132, 97, 108, 134, 127, 113, 105, 0, 0, 0, 0, 0, 0, 0, 117, 115, 115, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0 };
const uint8 gHairCap6Data[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 108, 108, 115, 123, 0, 0, 0, 0, 0, 129, 115, 103, 97, 100, 107, 118, 130, 141, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 107, 120, 0, 0, 0, 0, 0, 117, 113, 113, 110, 113, 122, 135, 0, 0, 0, 127, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 118, 127, 0, 0, 0, 0, 115, 118, 123, 127, 125, 135, 151, 0, 0, 148, 120, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 123, 129, 141, 125, 0, 0, 0, 0, 0, 118, 127, 134, 139, 0, 0, 168, 160, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 108, 123, 129, 129, 108, 130, 0, 0, 0, 0, 0, 0, 123, 129, 134, 142, 148, 163, 165, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 120, 134, 141, 141, 103, 139, 0, 0, 0, 0, 0, 0, 129, 134, 142, 146, 0, 130, 129, 130, 130, 129, 129, 0, 0, 0, 0, 0, 0, 0, 115, 141, 156, 160, 139, 146, 132, 0, 0, 0, 0, 0, 137, 142, 146, 155, 0, 118, 107, 103, 103, 110, 120, 0, 0, 0, 113, 0, 0, 0, 103, 135, 163, 176, 181, 168, 130, 0, 0, 0, 0, 0, 125, 127, 134, 137, 137, 137, 137, 129, 115, 115, 122, 130, 127, 120, 122, 0, 0, 0, 108, 135, 155, 165, 190, 191, 170, 142, 135, 0, 0, 0, 0, 0, 107, 108, 110, 0, 0, 161, 144, 139, 146, 0, 0, 125, 113, 107, 107, 117, 129, 139, 137, 130, 181, 202, 199, 156, 123, 110, 0, 0, 0, 0, 0, 0, 0, 135, 199, 183, 161, 160, 0, 0, 0, 149, 105, 108, 120, 137, 149, 141, 120, 98, 172, 202, 195, 130, 0, 0, 0, 120, 108, 110, 113, 115, 113, 122, 144, 163, 0, 0, 0, 0, 146, 127, 132, 134, 146, 172, 197, 195, 168, 144, 177, 225, 229, 144, 0, 0, 122, 179, 134, 120, 122, 130, 127, 146, 153, 165, 0, 0, 0, 0, 158, 146, 146, 141, 146, 170, 206, 229, 236, 233, 206, 233, 224, 167, 125, 134, 163, 183, 160, 148, 141, 137, 122, 151, 161, 163, 165, 167, 167, 168, 168, 168, 149, 137, 132, 144, 177, 215, 251, 255, 238, 240, 222, 200, 207, 222, 209, 179, 183, 172, 167, 148, 118, 132, 155, 158, 158, 163, 167, 168, 172, 174, 183, 168, 151, 151, 165, 193, 222, 242, 240, 242, 231, 227, 243, 254, 215, 161, 174, 179, 179, 161, 120, 123, 144, 149, 161, 168, 174, 172, 167, 161, 209, 206, 199, 191, 191, 200, 215, 227, 215, 231, 236, 227, 229, 227, 193, 146, 149, 161, 172, 161, 118, 148, 148, 151, 161, 167, 168, 167, 160, 153, 177, 184, 188, 188, 183, 184, 197, 209, 191, 215, 222, 207, 200, 197, 176, 141, 137, 139, 144, 141, 110, 0, 168, 163, 158, 149, 151, 151, 158, 161, 158, 165, 168, 158, 146, 151, 168, 190, 190, 197, 190, 179, 186, 204, 184, 148, 148, 129, 112, 0, 0, 0, 191, 176, 151, 134, 130, 142, 161, 0, 0, 197, 186, 163, 144, 146, 168, 195, 197, 184, 160, 156, 190, 225, 204, 160, 167, 127, 0, 0, 0, 149, 183, 188, 174, 139, 135, 155, 163, 153, 153, 151, 151, 151, 156, 161, 167, 174, 193, 161, 139, 168, 216, 236, 209, 168, 161, 0, 0, 0, 0, 174, 207, 216, 207, 177, 168, 179, 174, 155, 134, 134, 134, 134, 141, 149, 156, 163, 204, 179, 161, 174, 202, 209, 186, 155, 0, 0, 0, 0, 113, 206, 188, 211, 211, 190, 176, 174, 153, 122, 149, 148, 149, 153, 160, 172, 179, 186, 209, 200, 191, 188, 190, 181, 165, 146, 0, 0, 0, 0, 0, 213, 167, 197, 209, 197, 186, 181, 153, 118, 156, 155, 161, 165, 174, 184, 193, 202, 204, 207, 211, 200, 186, 170, 161, 161, 0, 0, 0, 0, 0, 179, 174, 206, 222, 218, 213, 215, 191, 158, 141, 139, 141, 144, 153, 163, 172, 176, 184, 197, 207, 202, 184, 176, 177, 183, 0, 0, 0, 0, 0, 149, 168, 193, 204, 193, 195, 206, 193, 168, 151, 0, 151, 149, 156, 160, 167, 172, 156, 167, 179, 183, 179, 179, 183, 188, 151, 0, 0, 0, 0, 168, 174, 188, 183, 161, 158, 176, 176, 158, 170, 0, 0, 163, 163, 165, 168, 170, 135, 139, 146, 156, 165, 170, 168, 163, 144, 0, 0, 0, 0, 213, 211, 216, 199, 167, 158, 179, 0, 0, 155, 149, 146, 139, 137, 139, 139, 144, 127, 122, 122, 132, 153, 160, 153, 139, 142, 0, 0, 0, 0, 176, 200, 188, 170, 158, 155, 163, 0, 0, 167, 146, 129, 129, 0, 0, 0, 141, 142, 141, 141, 141, 137, 132, 120, 115, 139, 134, 0, 0, 0, 200, 195, 184, 174, 167, 163, 167, 0, 0, 155, 137, 120, 120, 0, 0, 0, 0, 0, 0, 141, 142, 139, 130, 115, 103, 120, 115, 0, 0, 0, 190, 170, 167, 165, 163, 160, 161, 160, 160, 153, 137, 118, 115, 0, 0, 0, 0, 0, 0, 142, 142, 139, 130, 108, 90, 107, 107, 0, 0, 0, 144, 146, 149, 153, 156, 153, 148, 139, 134, 0, 0, 135, 120, 0, 0, 0, 0, 0, 0, 135, 139, 144, 134, 105, 0, 0, 0, 0, 0, 0, 129, 148, 151, 0, 0, 0, 153, 144, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 125, 135, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 113, 118, 125, 112, 110, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 142, 127, 142, 163, 130, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
const uint8 gHairCap7Data[] = { 110, 108, 123, 137, 118, 113, 110, 0, 0, 0, 0, 0, 0, 108, 115, 127, 127, 130, 118, 113, 115, 0, 0, 0, 0, 0, 118, 139, 144, 129, 153, 139, 123, 122, 0, 0, 0, 0, 0, 141, 165, 168, 144, 172, 155, 132, 127, 0, 0, 0, 0, 0, 146, 115, 153, 233, 216, 156, 115, 127, 0, 0, 0, 0, 0, 176, 153, 197, 255, 231, 160, 112, 132, 0, 0, 0, 0, 0, 161, 155, 200, 255, 240, 161, 113, 142, 0, 0, 0, 118, 0, 144, 151, 191, 245, 220, 163, 132, 156, 0, 0, 0, 122, 0, 172, 183, 209, 240, 186, 165, 160, 167, 158, 132, 123, 139, 122, 179, 191, 207, 213, 176, 170, 174, 170, 137, 105, 118, 155, 122, 158, 176, 179, 168, 199, 179, 167, 161, 139, 117, 127, 0, 0, 158, 183, 177, 160, 227, 188, 158, 153, 149, 135, 137, 0, 0, 0, 179, 163, 155, 191, 177, 181, 197, 191, 161, 149, 0, 122, 161, 161, 163, 163, 174, 158, 161, 176, 172, 144, 134, 144, 149, 137, 144, 160, 172, 161, 148, 149, 168, 168, 149, 144, 158, 181, 144, 149, 161, 168, 160, 146, 153, 181, 190, 179, 183, 204, 199 };
const uint8 gHairCap8Data[] = { 0, 0, 100, 130, 132, 122, 117, 0, 0, 0, 132, 120, 122, 122, 144, 163, 0, 0, 0, 0, 146, 127, 132, 134, 146, 172, 0, 0, 105, 122, 132, 0, 0, 0, 0, 0, 144, 144, 149, 146, 153, 165, 0, 0, 0, 0, 158, 146, 146, 141, 146, 170, 0, 0, 110, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 161, 163, 165, 167, 167, 168, 168, 168, 149, 137, 132, 144, 0, 110, 103, 108, 0, 0, 125, 134, 137, 135, 0, 0, 0, 132, 155, 158, 158, 163, 167, 168, 172, 174, 183, 168, 151, 151, 0, 0, 0, 105, 118, 122, 108, 120, 129, 142, 0, 0, 0, 123, 144, 149, 161, 168, 174, 172, 167, 161, 209, 206, 199, 191, 0, 0, 0, 0, 0, 0, 113, 132, 144, 153, 0, 0, 0, 148, 148, 151, 161, 167, 168, 167, 160, 153, 177, 184, 188, 188, 0, 0, 0, 0, 0, 0, 129, 144, 144, 135, 153, 0, 0, 0, 168, 163, 158, 149, 151, 151, 158, 161, 158, 165, 168, 158, 0, 0, 0, 0, 0, 112, 134, 142, 129, 107, 113, 155, 0, 0, 191, 176, 151, 134, 130, 142, 161, 0, 0, 197, 186, 163, 0, 0, 0, 0, 0, 129, 146, 167, 161, 129, 129, 161, 168, 149, 183, 188, 174, 139, 135, 155, 163, 153, 153, 151, 151, 151, 0, 0, 0, 0, 0, 108, 108, 132, 139, 130, 144, 179, 188, 174, 207, 216, 207, 177, 168, 179, 174, 155, 134, 134, 134, 134, 0, 0, 0, 105, 85, 95, 83, 112, 134, 149, 176, 206, 215, 206, 188, 211, 211, 190, 176, 174, 153, 122, 149, 148, 149, 153, 0, 0, 0, 110, 100, 112, 100, 123, 155, 179, 204, 220, 220, 213, 167, 197, 209, 197, 186, 181, 153, 118, 156, 155, 161, 165, 0, 0, 134, 125, 137, 149, 134, 146, 168, 197, 206, 195, 184, 179, 174, 206, 222, 218, 213, 215, 191, 158, 141, 139, 141, 144, 156, 134, 132, 155, 177, 181, 160, 153, 168, 193, 193, 163, 146, 149, 168, 193, 204, 193, 195, 206, 193, 168, 151, 0, 151, 149, 158, 137, 153, 197, 209, 188, 179, 165, 174, 202, 200, 167, 155, 168, 174, 188, 183, 161, 158, 176, 176, 158, 170, 0, 0, 163, 168, 149, 179, 225, 220, 183, 197, 176, 184, 220, 225, 195, 190, 213, 211, 216, 199, 167, 158, 179, 0, 0, 155, 149, 146, 139, 146, 148, 172, 200, 213, 215, 207, 209, 209, 197, 177, 165, 167, 176, 200, 188, 170, 158, 155, 163, 0, 0, 167, 146, 129, 129, 141, 149, 167, 181, 179, 170, 213, 204, 181, 155, 142, 149, 179, 200, 195, 184, 174, 167, 163, 167, 0, 0, 155, 137, 120, 120, 158, 174, 181, 174, 153, 135, 172, 168, 161, 149, 139, 148, 168, 190, 170, 167, 165, 163, 160, 161, 160, 160, 153, 137, 118, 115, 195, 207, 207, 181, 151, 127, 103, 129, 160, 0, 0, 158, 146, 144, 146, 149, 153, 156, 153, 148, 139, 134, 0, 0, 135, 120, 206, 215, 200, 172, 144, 127, 95, 122, 153, 0, 0, 153, 137, 129, 148, 151, 0, 0, 0, 153, 144, 135, 0, 0, 0, 0, 186, 176, 156, 137, 130, 129, 142, 146, 144, 139, 130, 132, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 137, 110, 108, 127, 0, 0, 0, 0, 139, 127, 127, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 118, 93, 100, 0, 0, 0, 0, 0, 179, 161, 139, 125, 120, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 149, 135, 129, 130, 0, 0, 0, 0, 0, 130, 132, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 142, 127, 142, 163, 151, 142, 130, 123, 120, 0, 0, 0, 0, 127, 125, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 146, 146, 0, 0, 0, 0, 0, 115, 0, 0, 0, 123, 125, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 123, 0, 0, 0, 0, 0, 110, 0, 0, 0, 125, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 113 };
const uint8 gHairCap9Data[] = { 134, 134, 139, 151, 0, 0, 0, 0, 156, 174, 200, 213, 183, 146, 163, 181, 170, 132, 118, 139, 144, 129, 153, 139, 130, 135, 139, 144, 151, 155, 188, 151, 135, 161, 199, 204, 186, 174, 204, 216, 193, 148, 141, 165, 168, 144, 172, 155, 0, 107, 117, 130, 142, 156, 170, 161, 155, 156, 163, 172, 184, 188, 234, 179, 156, 168, 146, 115, 153, 233, 216, 156, 0, 0, 0, 115, 134, 151, 179, 176, 174, 167, 165, 170, 186, 202, 254, 200, 177, 190, 176, 153, 197, 255, 231, 160, 0, 0, 0, 0, 134, 158, 184, 0, 0, 0, 160, 163, 188, 213, 233, 183, 158, 165, 161, 155, 200, 255, 240, 161, 0, 0, 0, 0, 151, 190, 179, 0, 0, 0, 149, 153, 183, 211, 216, 174, 144, 144, 144, 151, 191, 245, 220, 163, 0, 0, 0, 113, 172, 222, 168, 168, 163, 149, 134, 142, 170, 200, 243, 207, 176, 167, 172, 183, 209, 240, 186, 165, 0, 0, 0, 113, 177, 231, 163, 149, 132, 122, 129, 148, 168, 186, 227, 204, 179, 170, 179, 191, 207, 213, 176, 170, 0, 0, 0, 0, 156, 206, 165, 132, 0, 0, 132, 163, 176, 177, 167, 155, 141, 141, 158, 176, 179, 168, 199, 179, 0, 0, 0, 0, 132, 181, 170, 127, 0, 0, 137, 179, 0, 176, 134, 130, 127, 132, 158, 183, 177, 160, 227, 188, 0, 0, 0, 0, 172, 220, 190, 130, 107, 151, 193, 183, 151, 139, 148, 158, 0, 0, 0, 179, 163, 155, 191, 177, 0, 0, 0, 0, 160, 216, 211, 149, 118, 149, 186, 188, 170, 168, 176, 172, 165, 163, 161, 161, 163, 163, 174, 158, 0, 132, 0, 0, 160, 206, 227, 177, 142, 158, 186, 197, 197, 199, 206, 190, 165, 144, 137, 144, 160, 172, 161, 148, 0, 0, 141, 144, 163, 184, 220, 195, 177, 183, 200, 211, 209, 206, 222, 204, 177, 153, 144, 149, 161, 168, 160, 146, 0, 0, 168, 165, 151, 139, 184, 197, 202, 207, 211, 216, 206, 193, 209, 200, 190, 177, 168, 165, 163, 165, 144, 132, 112, 132, 158, 149, 127, 113, 155, 190, 211, 209, 202, 202, 195, 176, 181, 183, 184, 184, 183, 177, 170, 167, 129, 115, 127, 144, 144, 120, 118, 135, 139, 184, 204, 184, 170, 183, 186, 174, 158, 158, 163, 167, 172, 174, 176, 176, 134, 117, 0, 0, 144, 107, 129, 179, 137, 179, 193, 161, 142, 161, 183, 179, 144, 141, 141, 146, 155, 165, 177, 184, 156, 134, 0, 0, 0, 0, 0, 0, 148, 160, 170, 163, 155, 155, 172, 191, 134, 146, 0, 0, 0, 0, 160, 144, 125, 122, 0, 0, 0, 0, 0, 0, 137, 149, 156, 153, 141, 142, 158, 174, 151, 0, 0, 0, 0, 0, 0, 160, 137, 134, 0, 0, 0, 0, 0, 0, 134, 139, 144, 139, 130, 130, 142, 155, 0, 0, 0, 0, 0, 0, 0, 0, 158, 151, 0, 0, 0, 0, 0, 0, 0, 139, 139, 134, 129, 130, 137, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 137, 137, 137, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 129, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 122, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 112, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
const uint8 gHairCap10Data[] = { 191, 177, 181, 197, 191, 161, 149, 0, 122, 129, 141, 0, 0, 132, 174, 158, 161, 176, 172, 144, 134, 144, 149, 144, 139, 135, 135, 130, 161, 148, 149, 168, 168, 149, 144, 158, 181, 156, 129, 110, 113, 118, 160, 146, 153, 181, 190, 179, 183, 204, 199, 167, 125, 107, 105, 105, 144, 132, 144, 177, 197, 197, 211, 234, 216, 186, 149, 134, 127, 113, 129, 115, 123, 158, 177, 179, 200, 227, 227, 199, 170, 160, 160, 141, 134, 117, 120, 146, 158, 158, 174, 200, 211, 179, 148, 146, 160, 151, 156, 134, 132, 149, 155, 148, 160, 184, 183, 146, 112, 115, 135, 139, 125, 122, 123, 137, 153, 160, 155, 144, 158, 176, 165, 123, 108, 117, 137, 134, 134, 142, 155, 156, 148, 137, 134, 155, 153, 123, 113, 123, 158, 151, 148, 151, 155, 155, 141, 129, 113, 130, 135, 123, 120, 127, 0, 0, 0, 0, 0, 151, 135, 122, 103, 115, 123, 123, 123, 118, 0, 0, 0, 0, 0, 151, 135, 122, 110, 107, 112, 118, 115, 102, 0, 0, 0, 0, 0, 0, 141, 129, 113, 0, 0, 107, 107, 92, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0 };
const uint8 gHairCap11Data[] = { 0, 0, 0, 0, 0, 130, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 142, 127, 142, 163, 130, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 144, 146, 146, 123, 97, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 123, 112, 125, 125, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 113, 110, 149, 144, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 123, 123, 158, 153, 110, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 155, 144, 153, 151, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 155, 176, 190, 172, 139, 139, 165, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 141, 141, 177, 215, 188, 129, 134, 186, 146, 125, 0, 0, 0, 0, 108, 95, 118, 158, 144, 155, 168, 183, 186, 183, 174, 168, 137, 144, 0, 0, 0, 0, 115, 103, 115, 142, 141, 151, 165, 174, 179, 174, 167, 160, 144, 148, 0, 0, 0, 113, 129, 120, 117, 127, 139, 144, 155, 163, 165, 158, 153, 148, 149, 144, 137, 127, 112, 0, 0, 0, 125, 122, 139, 141, 146, 151, 151, 144, 137, 135, 137, 129, 115, 0, 0, 0, 0, 0, 0, 132, 141, 142, 141, 139, 135, 130, 125, 125, 122, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 142, 135, 130, 125, 120, 120, 113, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 135, 125, 122, 118, 115, 122, 120, 0, 0, 0 };

GlTextureIslands* gl_new_hair_cap_moss_texture()
{
	GlTextureIslands*	texture = new GlTextureIslands();
	if (!texture || texture->InitCheck() != B_OK) {
		delete texture;
		return 0;
	}
	texture->AddIsland(gHairCap0Data, 22, 11);
	texture->AddIsland(gHairCap1Data, 20, 16);
	texture->AddIsland(gHairCap2Data, 16, 13);
	texture->AddIsland(gHairCap3Data, 12, 22);
	texture->AddIsland(gHairCap4Data, 14, 14);
	texture->AddIsland(gHairCap5Data, 12, 16);
	texture->AddIsland(gHairCap6Data, 30, 36);
	texture->AddIsland(gHairCap7Data, 13, 16);
	texture->AddIsland(gHairCap8Data, 26, 28);
	texture->AddIsland(gHairCap9Data, 24, 27);
	texture->AddIsland(gHairCap10Data, 14, 15);
	texture->AddIsland(gHairCap11Data, 18, 16);
	return texture;
}

/*******************************************************
 * Saucerman texture
 *******************************************************/
const uint8 gSaucerman0Data[] = { 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 212, 210, 195, 195, 210, 195, 195, 195, 195, 210, 195, 185, 185, 185, 166, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 212, 210, 179, 155, 134, 134, 144, 144, 167, 144, 134, 115, 115, 115, 134, 115, 115, 115, 166, 195, 210, 210, 212, 210, 210, 218, 218, 218, 218, 219, 218, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 195, 155, 155, 144, 115, 83, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 115, 136, 134, 156, 210, 210, 210, 219, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 195, 173, 173, 155, 115, 115, 115, 83, 83, 83, 87, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 87, 87, 87, 156, 192, 192, 212, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 211, 195, 161, 144, 115, 115, 87, 80, 109, 83, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 50, 72, 78, 125, 192, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 144, 115, 80, 80, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 115, 125, 219, 219, 219, 219, 219, 219, 218, 218, 218, 209, 197, 161, 115, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 44, 69, 93, 219, 219, 219, 219, 219, 218, 218, 212, 210, 161, 115, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 93, 219, 219, 219, 219, 219, 218, 218, 212, 198, 115, 78, 78, 78, 78, 78, 78, 78, 68, 78, 78, 78, 78, 78, 78, 71, 80, 74, 74, 71, 76, 90, 87, 90, 74, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 219, 219, 219, 219, 219, 218, 218, 218, 212, 159, 78, 78, 78, 78, 78, 78, 78, 64, 73, 128, 155, 182, 148, 104, 128, 140, 154, 115, 110, 115, 122, 126, 131, 118, 95, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 219, 219, 219, 219, 218, 218, 218, 211, 105, 78, 78, 78, 78, 78, 94, 94, 114, 200, 210, 208, 204, 205, 204, 200, 201, 180, 188, 191, 195, 192, 195, 185, 155, 114, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 219, 219, 219, 219, 218, 218, 218, 212, 57, 78, 78, 78, 78, 64, 128, 74, 183, 211, 211, 211, 212, 211, 211, 212, 210, 211, 212, 212, 211, 210, 212, 204, 195, 155, 125, 78, 78, 78, 93, 105, 78, 78, 78, 78, 219, 219, 219, 219, 218, 218, 218, 197, 78, 78, 78, 81, 117, 175, 96, 85, 176, 212, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 210, 176, 124, 136, 78, 78, 99, 111, 86, 78, 78, 78, 219, 219, 219, 219, 218, 218, 218, 157, 78, 78, 78, 81, 196, 212, 181, 154, 197, 212, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 202, 162, 135, 122, 78, 99, 126, 129, 95, 78, 78, 219, 219, 219, 219, 218, 218, 218, 124, 78, 78, 96, 151, 210, 212, 210, 210, 210, 212, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 207, 165, 143, 124, 96, 95, 126, 126, 109, 78, 78, 219, 219, 219, 219, 218, 218, 218, 72, 78, 78, 124, 201, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 212, 204, 172, 124, 91, 91, 124, 156, 144, 86, 78, 219, 219, 219, 219, 218, 218, 218, 57, 68, 74, 158, 210, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 202, 170, 114, 97, 90, 130, 118, 86, 78, 219, 219, 219, 219, 218, 218, 218, 87, 59, 97, 174, 210, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 210, 189, 124, 103, 91, 105, 111, 86, 78, 219, 219, 219, 219, 218, 218, 218, 115, 71, 135, 202, 211, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 211, 212, 210, 211, 200, 143, 110, 78, 78, 99, 86, 78, 219, 219, 219, 219, 218, 218, 218, 141, 73, 102, 199, 209, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 209, 191, 209, 209, 201, 135, 129, 102, 78, 78, 78, 78, 219, 219, 219, 219, 218, 218, 218, 162, 73, 98, 210, 210, 210, 212, 210, 210, 210, 212, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 210, 210, 185, 206, 197, 172, 112, 99, 95, 78, 78, 78, 78, 219, 219, 219, 218, 218, 218, 178, 64, 103, 213, 200, 164, 176, 210, 211, 210, 212, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 212, 200, 163, 141, 100, 106, 96, 135, 134, 131, 118, 95, 78, 78, 78, 78, 219, 219, 219, 218, 218, 218, 212, 71, 106, 210, 103, 82, 106, 107, 136, 182, 207, 210, 218, 218, 218, 218, 218, 218, 218, 212, 212, 206, 165, 89, 78, 53, 78, 78, 78, 78, 86, 78, 114, 87, 88, 78, 78, 78, 219, 219, 219, 218, 218, 218, 211, 77, 72, 164, 139, 198, 199, 136, 111, 74, 126, 191, 208, 218, 218, 218, 218, 218, 209, 203, 150, 111, 78, 78, 74, 140, 154, 142, 189, 155, 108, 61, 89, 106, 86, 83, 78, 78, 219, 219, 219, 218, 218, 218, 212, 114, 69, 160, 189, 208, 167, 143, 127, 134, 108, 78, 145, 207, 218, 218, 218, 218, 208, 149, 74, 77, 79, 78, 115, 109, 141, 124, 98, 78, 99, 105, 80, 98, 99, 96, 81, 78, 219, 219, 219, 218, 218, 218, 212, 189, 94, 204, 203, 115, 79, 115, 96, 143, 143, 126, 156, 186, 218, 218, 218, 210, 210, 189, 156, 134, 70, 114, 115, 79, 131, 141, 159, 78, 98, 109, 99, 98, 114, 96, 83, 78, 78, 219, 219, 218, 218, 218, 212, 210, 97, 212, 206, 94, 123, 83, 148, 152, 124, 142, 137, 194, 210, 218, 218, 210, 207, 182, 145, 172, 83, 171, 189, 176, 68, 81, 178, 116, 78, 139, 133, 93, 98, 99, 78, 78, 78, 219, 219, 218, 218, 218, 212, 210, 127, 212, 174, 136, 139, 169, 156, 111, 161, 179, 141, 149, 210, 218, 218, 210, 193, 148, 148, 159, 171, 154, 105, 118, 131, 128, 182, 187, 130, 171, 143, 89, 98, 86, 78, 78, 78, 219, 219, 218, 218, 218, 212, 203, 119, 212, 208, 167, 132, 96, 70, 137, 201, 210, 191, 204, 210, 218, 218, 210, 195, 141, 139, 195, 198, 177, 124, 97, 154, 145, 202, 166, 96, 115, 112, 99, 104, 111, 86, 78, 78, 219, 219, 218, 218, 218, 212, 186, 134, 212, 199, 154, 191, 158, 192, 114, 192, 167, 204, 210, 210, 218, 218, 210, 193, 169, 169, 208, 197, 209, 191, 203, 194, 202, 139, 78, 95, 183, 189, 163, 115, 114, 86, 78, 78, 219, 219, 218, 218, 218, 212, 196, 172, 212, 210, 191, 150, 170, 199, 182, 174, 180, 208, 212, 218, 218, 218, 198, 190, 192, 205, 210, 208, 192, 168, 143, 114, 78, 78, 150, 164, 195, 204, 210, 166, 117, 86, 78, 78, 219, 219, 218, 218, 218, 212, 211, 211, 218, 218, 211, 212, 207, 164, 164, 200, 211, 211, 218, 218, 218, 218, 210, 210, 197, 194, 202, 210, 212, 211, 196, 192, 198, 210, 212, 210, 210, 210, 212, 170, 120, 79, 78, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 209, 211, 218, 218, 218, 218, 218, 218, 210, 206, 210, 175, 179, 210, 211, 209, 210, 212, 209, 218, 218, 218, 218, 209, 182, 115, 90, 79, 78, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 206, 176, 192, 185, 192, 210, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 163, 117, 79, 79, 78, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 213, 218, 218, 218, 212, 190, 180, 145, 204, 212, 218, 218, 218, 218, 218, 218, 218, 218, 218, 207, 141, 99, 79, 79, 78, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 212, 210, 210, 212, 210, 210, 212, 195, 182, 210, 218, 218, 218, 218, 218, 218, 218, 218, 218, 194, 170, 118, 78, 86, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 206, 209, 210, 209, 209, 173, 180, 180, 207, 174, 205, 218, 218, 218, 218, 218, 218, 218, 218, 210, 192, 148, 123, 108, 79, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 205, 100, 83, 179, 192, 167, 135, 47, 19, 152, 186, 170, 207, 211, 218, 218, 218, 218, 218, 218, 211, 206, 139, 105, 106, 108, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 209, 142, 90, 167, 117, 118, 90, 81, 85, 189, 138, 129, 160, 210, 218, 218, 218, 218, 218, 218, 210, 206, 136, 108, 114, 86, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 210, 212, 210, 206, 187, 151, 127, 123, 142, 121, 151, 205, 210, 218, 218, 218, 218, 218, 218, 209, 189, 141, 136, 86, 86, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 212, 210, 209, 204, 193, 210, 210, 212, 218, 218, 218, 218, 218, 218, 218, 207, 196, 148, 129, 86, 88, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 189, 165, 126, 86, 87, 78, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 207, 181, 150, 130, 92, 87, 78, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 199, 154, 151, 123, 87, 78, 78, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 212, 211, 210, 201, 210, 211, 209, 186, 185, 193, 211, 211, 210, 212, 210, 218, 218, 218, 218, 218, 191, 135, 133, 92, 87, 78, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 209, 193, 170, 133, 133, 125, 156, 133, 117, 120, 111, 106, 114, 123, 174, 209, 218, 218, 218, 218, 218, 186, 141, 124, 87, 87, 78, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 199, 146, 198, 210, 212, 210, 210, 212, 210, 210, 204, 197, 174, 167, 204, 210, 218, 218, 218, 218, 209, 166, 130, 124, 87, 78, 78, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 211, 210, 212, 212, 211, 213, 211, 211, 212, 211, 210, 212, 212, 211, 212, 212, 211, 218, 218, 218, 218, 203, 164, 127, 87, 78, 78, 78, 78, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 207, 194, 159, 176, 196, 177, 189, 189, 205, 210, 210, 212, 218, 218, 218, 218, 218, 198, 145, 126, 87, 78, 78, 78, 87, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 200, 197, 198, 206, 211, 204, 202, 204, 211, 209, 218, 218, 218, 218, 218, 218, 210, 175, 124, 141, 87, 87, 87, 87, 116, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 211, 212, 211, 211, 212, 210, 211, 212, 218, 218, 218, 218, 218, 218, 218, 218, 209, 166, 127, 127, 124, 87, 87, 117, 115, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 208, 176, 141, 134, 137, 117, 99, 113, 103, 78, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 210, 196, 164, 131, 129, 109, 125, 147, 112, 112, 93, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 200, 198, 189, 141, 120, 120, 108, 111, 158, 150, 118, 108, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 212, 203, 207, 210, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 207, 164, 175, 139, 130, 114, 87, 87, 127, 162, 181, 158, 158, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 195, 126, 166, 207, 212, 218, 218, 218, 218, 218, 218, 218, 218, 218, 210, 206, 176, 130, 115, 87, 115, 87, 87, 124, 134, 154, 181, 201, 186, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 120, 129, 189, 206, 206, 212, 210, 210, 212, 210, 209, 200, 170, 150, 127, 105, 78, 78, 109, 101, 111, 115, 120, 136, 158, 201, 219, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 181, 94, 111, 85, 134, 151, 152, 158, 151, 135, 106, 98, 108, 87, 78, 87, 87, 108, 122, 111, 105, 114, 105, 158, 201, 219, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 181, 118, 94, 72, 75, 60, 78, 82, 88, 106, 104, 99, 87, 87, 78, 116, 125, 95, 105, 98, 96, 201, 211, 219, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 197, 148, 131, 101, 78, 78, 67, 62, 78, 104, 100, 96, 87, 87, 107, 117, 103, 89, 97, 81, 201, 207, 218, 219, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 204, 207, 160, 100, 100, 78, 78, 100, 87, 131, 78, 78, 87, 131, 131, 160, 181, 212, 203, 210, 218, 218, 219, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 181, 160, 100, 100, 100, 100, 100, 131, 131, 160, 201, 218, 218, 218, 218, 218, 218, 218, 218, 219, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 201, 181, 181, 181, 201, 201, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 219, 219, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 219, 219, 219, 219, 218, 219, 218 };

GlTextureIslands* gl_new_saucerman_texture()
{
	GlTextureIslands*	texture = new GlTextureIslands();
	if (!texture || texture->InitCheck() != B_OK) {
		delete texture;
		return 0;
	}
	texture->AddIsland(gSaucerman0Data, 44, 65);
	return texture;
}

/*******************************************************
 * Leaf texture
 *******************************************************/

// #pragma mark -

/*******************************************************
 * _GL-IMAGE-TO-ISLANDS
 *******************************************************/
_GlImageToIslands::_GlImageToIslands()
		: mTarget(0)
{
}

/* For debugging, a way to colour diffferent groups differently.
 */
struct _group_color
{
	float	r, g, b;
	
	_group_color() : r(0), g(0), b(0)										{ }
	_group_color(float inR, float inG, float inB) : r(inR), g(inG), b(inB)	{ }
};

static const _group_color	mColors[] 		= {
	_group_color(1, 0, 0), _group_color(0, 1, 0), _group_color(0, 0, 1),
	_group_color(1, 1, 0), _group_color(1, 0, 1), _group_color(0, 1, 1)
};
static const uint32			mColorsSize 	= 6;

static inline int32 _ag(_island* islands, int32 w, int32 h, int32 x, int32 y)
{
	if (x < 0 || x >= w || y < 0 || y >= h) return NO_GROUP;
	return islands[ARP_PIXEL(x, y, w)].group;
}

/* Find a group different than the supplied group.
 */
static inline int32 adjacent_group(_island* islands, int32 w, int32 h, int32 x, int32 y, int32 group)
{
	int32		g;
	if ((g = _ag(islands, w, h, x - 1, y - 1)) >= GROUP_START && g != group) return g;
	if ((g = _ag(islands, w, h, x,     y - 1)) >= GROUP_START && g != group) return g;
	if ((g = _ag(islands, w, h, x + 1, y - 1)) >= GROUP_START && g != group) return g;

	if ((g = _ag(islands, w, h, x - 1, y)) >= GROUP_START && g != group) return g;
	if ((g = _ag(islands, w, h, x + 1, y)) >= GROUP_START && g != group) return g;

	if ((g = _ag(islands, w, h, x - 1, y + 1)) >= GROUP_START && g != group) return g;
	if ((g = _ag(islands, w, h, x,     y + 1)) >= GROUP_START && g != group) return g;
	if ((g = _ag(islands, w, h, x + 1, y + 1)) >= GROUP_START && g != group) return g;
	return NO_GROUP;
}

status_t _GlImageToIslands::MakeIslands(GlPlanes* pixels, int32 w, int32 h,
										int32 initalRange, int32 connectedRange,
										int32 separatedRange,
										int32 minW, int32 minH,
										GlTextureIslands* target)
{
	mTarget = target;
	ArpVALIDATE(mTarget, return B_ERROR);

	_island*	islands = new _island[w * h];
	if (!islands) return B_NO_MEMORY;
	int32		x, y, pix, min = 255, max = 0;
	bool		more;
	/* Init
	 */
	for (pix = 0; pix < w * h; pix++) {
		if (pixels->r[pix] < min) min = pixels->r[pix];
		if (pixels->r[pix] > max) max = pixels->r[pix];
		islands[pix].group = NO_GROUP;
	}
	/* Find all peaks.
	 */
	int32		groupCount = 0;
	int32		altitude = max - initalRange;		// Current height all cells must
													// be above to qualify for whatever
													// step we're in.
	for (y = 0; y < h; y++) {
		for (x = 0; x < w; x++) {
			pix = ARP_PIXEL(x, y, w);
			if (pixels->r[pix] >= altitude) {
				int32		g = adjacent_group(islands, w, h, x, y, -1);
				if (g >= GROUP_START) islands[pix].group = g;
				else {
					islands[pix].group = groupCount;
					groupCount++;
				}
			}
		}
	}
	/* Merge all adjacent groups -- that is, all the peaks get merged,
	 * everything after that is separate.
	 */
	while (merge_groups(islands, w, h)) ;
	/* Find the unique island numbers.
	 */
	set<int32>				uniqueGroups;
	set<int32>::iterator	i;
	for (pix = 0; pix < w * h; pix++) {
		if (islands[pix].group >= GROUP_START) uniqueGroups.insert(islands[pix].group);
	}
	/* Now start growing the groups.  In this first growth stage, all
	 * adjacent groups will be merged.
	 */
	if (connectedRange > 0) {
		more = true;
		altitude = max - initalRange - connectedRange;
		while (more) {
			more = false;
			for (i = uniqueGroups.begin(); i != uniqueGroups.end(); i++) {
				if (grow_group(pixels, islands, w, h, *i, altitude)) more = true;
			}
		}
		while (merge_groups(islands, w, h)) ;
		/* Recompute the group numbers
		 */
		uniqueGroups.erase(uniqueGroups.begin(), uniqueGroups.end());
		for (pix = 0; pix < w * h; pix++) {
			if (islands[pix].group >= GROUP_START) uniqueGroups.insert(islands[pix].group);
		}
	}
	/* Continue growing the groups -- the islands have been set by the
	 * above step, so just grow each island as we can now.
	 */
	if (separatedRange > 0) {
		bool		more = true;
		altitude = max - initalRange - connectedRange - separatedRange;
		while (more) {
			more = false;
			for (i = uniqueGroups.begin(); i != uniqueGroups.end(); i++) {
				if (grow_group(pixels, islands, w, h, *i, altitude)) more = true;
			}
		}
	}
#if 0
	for (y = 0; y < h; y++) {
		for (x = 0; x < 10; x++) {
			printf("%ld\t", islands[ARP_PIXEL(x, y, w)].group);
		}
		printf("\n");
	}
#endif
printf("Group count is %ld\n", uniqueGroups.size());

	/* POST GROWING
	 */
	/* Anyone surrounded on three or more sides by the same group should
	 * be filled.
	 */
	Step5(islands, w, h);

	/* FINALIZING - write out the class.
	 */
	Step6(pixels, islands, w, h, uniqueGroups, minW, minH);

#if 0
	/* VISUALIZING - colour the various islands for user feedback.
	 */
	uint32			colorIndex = 0;
	for (i = uniqueGroups.begin(); i != uniqueGroups.end(); i++) {
		int32		group = *i;
		for (pix = 0; pix < w * h; pix++) {
			if (islands[pix].group == group) {
				pixels->r[pix] = arp_clip_255(pixels->r[pix] * mColors[colorIndex].r);
				pixels->g[pix] = arp_clip_255(pixels->g[pix] * mColors[colorIndex].g);
				pixels->b[pix] = arp_clip_255(pixels->b[pix] * mColors[colorIndex].b);
			}
		}
		colorIndex++;
		if (colorIndex >= mColorsSize) colorIndex = 0;
	}
#endif
	delete[] islands;
	return B_OK;
}

void _GlImageToIslands::Step5(_island* islands, int32 w, int32 h)
{
	bool	more = true;
	while (more) {
		more = false;
		for (int32 y = 0; y < h; y++) {
			for (int32 x = 0; x < w; x++) {
				int32	pix = ARP_PIXEL(x, y, w);
				if (islands[pix].group == NO_GROUP) {
					int32	group = surrounding_group(islands, w, h, x, y);
					if (group >= GROUP_START) {
						islands[pix].group = group;
						more = true;
					}
				}
			}
		}
	}
}

status_t _GlImageToIslands::Step6(	GlPlanes* pixels, _island* islands, int32 w, int32 h,
									set<int32>& groups, int32 minW, int32 minH)
{
	set<int32>::iterator	i;
	for (i = groups.begin(); i != groups.end(); i++) {
		/* Find the bounds of the island.
		 */
		int32				l = -1, t, r, b, x, y, pix, g = *i;
		for (y = 0; y < h; y++) {
			for (x = 0; x < w; x++) {
				if (islands[ARP_PIXEL(x, y, w)].group == g) {
					if (l == -1) {
						l = r = x;
						t = b = y;
					} else {
						if (x < l) l = x;
						if (x > r) r = x;
						if (y < t) t = y;
						if (y > b) b = y;
					}
				}
			}
		}
		/* Write out the island, provided it's big enough.
		 */
		int32				islandW = (r - l) + 1, islandH = (b - t) + 1;
		if (l >= 0 && l <= r && r < w && t >= 0 && t <= b && b < h
				&& islandW >= minW && islandH >= minH) {
			uint8*			island = new uint8[islandW * islandH];
			if (!island) return B_NO_MEMORY;
			int32			k = 0;
			for (y = t; y <= b; y++) {
				for (x = l; x <= r; x++) {
					ArpASSERT(k < islandW * islandH);
					pix = ARP_PIXEL(x, y, w);
					if (islands[pix].group >= GROUP_START) {
						if (pixels->r[pix] <= 1) island[k] = 1;
						else island[k] = pixels->r[pix];
					} else island[k] = 0;
					k++;
				}
			}
			mTarget->AddIsland(island, islandW, islandH);
		}

#if 0
		/* Write out the island, provided it's big enough.
		 */
		int32				islandW = (r - l) + 1, islandH = (b - t) + 1;
		if (l >= 0 && l <= r && r < w && t >= 0 && t <= b && b < h
				&& islandW >= minW && islandH >= minH) {
			outStr << "const uint8 g" << n << index << "Data[] = { ";
			for (y = t; y <= b; y++) {
				for (x = l; x <= r; x++) {
					if (!(y == t && x == l)) outStr << ", ";
					pix = ARP_PIXEL(x, y, w);
					if (islands[pix].group >= GROUP_START) {
						if (pixels->r[pix] <= 1) outStr << "1";
						else outStr << int32(pixels->r[pix]);
					} else {
						outStr << "0";
						}
				}
			}
			outStr << " };\n";

			index++;
		}
#endif

	}
	return B_OK;
}
	
bool _GlImageToIslands::merge_groups(_island* islands, int32 w, int32 h)
{
	bool					changes = false;
	for (int32 y = 0; y < h; y++) {
		for (int32 x = 0; x < w; x++) {
			int32			pix = ARP_PIXEL(x, y, w);
			if (islands[pix].group >= 0) {
				int32		g = adjacent_group(islands, w, h, x, y, islands[pix].group);
				if (g >= GROUP_START) {
					changes = true;
					for (int32 pix2 = 0; pix2 < w * h; pix2++) {
						if (islands[pix2].group == g) islands[pix2].group = islands[pix].group;
					}
				}
			}
		}
	}
	return changes;
}

bool _GlImageToIslands::grow_group(	GlPlanes* pixels, _island* islands, int32 w,
									int32 h, int32 group, int32 altitude)
{
	int32		pix1, pix2;
	for (pix1 = 0; pix1 < w *  h; pix1++) ArpASSERT(islands[pix1].group >= NO_GROUP);

	for (int32 y = 0; y < h; y++) {
		for (int32 x = 0; x < w; x++) {
			pix1 = ARP_PIXEL(x, y, w);
			if (islands[pix1].group == group) {
				for (int32 row = y - 1; row <= y + 1; row++) {
					for (int32 col = x - 1; col <= x + 1; col++) {
						if (col >= 0 && col < w && row >= 0 && row < h) {
							pix2 = ARP_PIXEL(col, row, w);
							if (islands[pix2].group == NO_GROUP && pixels->r[pix2] >= altitude
									&& pixels->r[pix2] <= pixels->r[pix1]) {
								islands[pix2].group = TEMP_GROUP;
							}
						}
					}
				}
			}
		}
	}
	/* I used an invalid value as an intermediary, set all of them
	 * to the group now.
	 */
	bool		changed = false;
	for (pix1 = 0; pix1 < w *  h; pix1++) {
		if (islands[pix1].group == TEMP_GROUP) {
			islands[pix1].group = group;
			changed = true;
		}
	}
	return changed;
}

/* Answer whatever group surrounds me.  To be surrounded, I must have
 * three or more of the same group (and it can't be NO_GROUP).  Otherwise,
 * return NO_GROUP.
 */
int32 _GlImageToIslands::surrounding_group(	_island* islands, int32 w, int32 h, int32 x, int32 y)
{
	int32		l = TEMP_GROUP, t = TEMP_GROUP, r = TEMP_GROUP, b = TEMP_GROUP;
	int32		row, col;
	if ( (col = x - 1) >= 0 && col < w && (row = y) >= 0 && row < h)
		l = islands[ARP_PIXEL(col, row, w)].group;
	if ( (col = x) >= 0 && col < w && (row = y - 1) >= 0 && row < h)
		t = islands[ARP_PIXEL(col, row, w)].group;
	if ( (col = x + 1) >= 0 && col < w && (row = y) >= 0 && row < h)
		r = islands[ARP_PIXEL(col, row, w)].group;
	if ( (col = x) >= 0 && col < w && (row = y + 1) >= 0 && row < h)
		b = islands[ARP_PIXEL(col, row, w)].group;

	int32		g1 = TEMP_GROUP, g1Count = 0, g2 = TEMP_GROUP, g2Count = 0;
	if (l >= NO_GROUP) { g1 = l; g1Count++; }
	if (t >= NO_GROUP) {
		if (g1Count == 0 || g1 == t) { g1 = t; g1Count++; }
		else { g2 = t; g2Count++; }
	}
	if (r >= NO_GROUP) {
		if (g1Count == 0 || g1 == r) { g1 = r; g1Count++; }
		else if (g2Count == 0 || g2 == r) { g2 = r; g2Count++; }
		else return NO_GROUP;
	}
	if (b >= NO_GROUP) {
		if (g1Count == 0 || g1 == b) { g1 = b; g1Count++; }
		else if (g2Count == 0 || g2 == b) { g2 = b; g2Count++; }
		else return NO_GROUP;
	}
#if 0
if (x == 8 && y == 19) {
	printf("(%ld, %ld) g1 %ld count %ld   g2 %ld count %ld\n", x, y, 
}
#endif
	if (g1Count == 0) return NO_GROUP;
	if (g2Count == 0) return g1;
	if (g1Count > g2Count && g1 >= GROUP_START && g2Count <= 1)
		return g1;
	if (g2Count > g1Count && g2 >= GROUP_START && g1Count <= 1)
		return g2;
	return NO_GROUP;
}
